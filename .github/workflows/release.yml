name: Build and Release VSCode Extension

# on:
#   release:
#     types: [created]

# For debugging
on:
  push:
    branches:
      - '**'

jobs:
  build-extension:
    name: Build Platform Extension
    strategy:
      matrix:
        include:
          # Windows platforms
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            platform: win32-x64
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            platform: win32-arm64
          
          # Linux platforms
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            platform: linux-x64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            platform: linux-arm64
          - os: ubuntu-latest
            target: armv7-unknown-linux-gnueabihf
            platform: linux-armhf
          
          # Alpine Linux platforms
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            platform: alpine-x64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
            platform: alpine-arm64
          
          # macOS platforms
          - os: macos-latest
            target: x86_64-apple-darwin
            platform: darwin-x64
          - os: macos-latest
            target: aarch64-apple-darwin
            platform: darwin-arm64
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      
      - name: Install cross-compilation tools
        if: contains(matrix.target, 'aarch64-unknown-linux') || contains(matrix.target, 'armv7-unknown-linux') || contains(matrix.target, 'unknown-linux-musl')
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu gcc-arm-linux-gnueabihf musl-tools

      - name: Build LSP
        run: cargo build --release --target ${{ matrix.target }} -p atopile_lsp

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Prepare LSP binary
        run: |
          mkdir -p vscode/lsp
          cp target/${{ matrix.target }}/release/atopile_lsp${{ matrix.os == 'windows-latest' && '.exe' || '' }} vscode/lsp/atopile_lsp${{ matrix.os == 'windows-latest' && '.exe' || '' }}
          ${{ matrix.os != 'windows-latest' && 'chmod +x vscode/lsp/atopile_lsp' || '' }}

      - name: Install dependencies and build VSIX
        run: |
          cd vscode
          npm install
          # Update package.json to include platform in version
          VERSION=$(node -p "require('./package.json').version")
          node -e "const p=require('./package.json'); p.version=p.version+'-${{ matrix.platform }}'; require('fs').writeFileSync('./package.json', JSON.stringify(p, null, 2))"
          npx --yes vsce package --target ${{ matrix.platform }}

      - name: Upload VSIX to Release
        uses: softprops/action-gh-release@v1
        with:
          files: vscode/atopile-analyzer-*.vsix
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 